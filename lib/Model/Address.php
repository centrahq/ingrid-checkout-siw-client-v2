<?php
/**
 * Address
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SIW API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Address Class Doc Comment
 *
 * @category Class
 * @description Common address entity that used almost everywhere in Ingrid&#39;s API.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Address implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Address';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'address_lines' => 'string[]',
        'apartment_number' => 'string',
        'attn' => 'string',
        'care_of' => 'string',
        'city' => 'string',
        'coordinates' => '\OpenAPI\Client\Model\Coordinates',
        'country' => 'string',
        'door_code' => 'string',
        'name' => 'string',
        'postal_code' => 'string',
        'region' => 'string',
        'street' => 'string',
        'street_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'address_lines' => null,
        'apartment_number' => null,
        'attn' => null,
        'care_of' => null,
        'city' => null,
        'coordinates' => null,
        'country' => null,
        'door_code' => null,
        'name' => null,
        'postal_code' => null,
        'region' => null,
        'street' => null,
        'street_number' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'address_lines' => false,
		'apartment_number' => false,
		'attn' => false,
		'care_of' => false,
		'city' => false,
		'coordinates' => false,
		'country' => false,
		'door_code' => false,
		'name' => false,
		'postal_code' => false,
		'region' => false,
		'street' => false,
		'street_number' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address_lines' => 'address_lines',
        'apartment_number' => 'apartment_number',
        'attn' => 'attn',
        'care_of' => 'care_of',
        'city' => 'city',
        'coordinates' => 'coordinates',
        'country' => 'country',
        'door_code' => 'door_code',
        'name' => 'name',
        'postal_code' => 'postal_code',
        'region' => 'region',
        'street' => 'street',
        'street_number' => 'street_number'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address_lines' => 'setAddressLines',
        'apartment_number' => 'setApartmentNumber',
        'attn' => 'setAttn',
        'care_of' => 'setCareOf',
        'city' => 'setCity',
        'coordinates' => 'setCoordinates',
        'country' => 'setCountry',
        'door_code' => 'setDoorCode',
        'name' => 'setName',
        'postal_code' => 'setPostalCode',
        'region' => 'setRegion',
        'street' => 'setStreet',
        'street_number' => 'setStreetNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address_lines' => 'getAddressLines',
        'apartment_number' => 'getApartmentNumber',
        'attn' => 'getAttn',
        'care_of' => 'getCareOf',
        'city' => 'getCity',
        'coordinates' => 'getCoordinates',
        'country' => 'getCountry',
        'door_code' => 'getDoorCode',
        'name' => 'getName',
        'postal_code' => 'getPostalCode',
        'region' => 'getRegion',
        'street' => 'getStreet',
        'street_number' => 'getStreetNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('address_lines', $data ?? [], null);
        $this->setIfExists('apartment_number', $data ?? [], null);
        $this->setIfExists('attn', $data ?? [], null);
        $this->setIfExists('care_of', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('coordinates', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('door_code', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('postal_code', $data ?? [], null);
        $this->setIfExists('region', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('street_number', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address_lines
     *
     * @return string[]|null
     */
    public function getAddressLines()
    {
        return $this->container['address_lines'];
    }

    /**
     * Sets address_lines
     *
     * @param string[]|null $address_lines address_lines
     *
     * @return self
     */
    public function setAddressLines($address_lines)
    {

        if (is_null($address_lines)) {
            throw new \InvalidArgumentException('non-nullable address_lines cannot be null');
        }

        $this->container['address_lines'] = $address_lines;

        return $this;
    }

    /**
     * Gets apartment_number
     *
     * @return string|null
     */
    public function getApartmentNumber()
    {
        return $this->container['apartment_number'];
    }

    /**
     * Sets apartment_number
     *
     * @param string|null $apartment_number Number of the apartment.
     *
     * @return self
     */
    public function setApartmentNumber($apartment_number)
    {

        if (is_null($apartment_number)) {
            throw new \InvalidArgumentException('non-nullable apartment_number cannot be null');
        }

        $this->container['apartment_number'] = $apartment_number;

        return $this;
    }

    /**
     * Gets attn
     *
     * @return string|null
     */
    public function getAttn()
    {
        return $this->container['attn'];
    }

    /**
     * Sets attn
     *
     * @param string|null $attn attn
     *
     * @return self
     */
    public function setAttn($attn)
    {

        if (is_null($attn)) {
            throw new \InvalidArgumentException('non-nullable attn cannot be null');
        }

        $this->container['attn'] = $attn;

        return $this;
    }

    /**
     * Gets care_of
     *
     * @return string|null
     */
    public function getCareOf()
    {
        return $this->container['care_of'];
    }

    /**
     * Sets care_of
     *
     * @param string|null $care_of care_of
     *
     * @return self
     */
    public function setCareOf($care_of)
    {

        if (is_null($care_of)) {
            throw new \InvalidArgumentException('non-nullable care_of cannot be null');
        }

        $this->container['care_of'] = $care_of;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city city
     *
     * @return self
     */
    public function setCity($city)
    {

        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets coordinates
     *
     * @return \OpenAPI\Client\Model\Coordinates|null
     */
    public function getCoordinates()
    {
        return $this->container['coordinates'];
    }

    /**
     * Sets coordinates
     *
     * @param \OpenAPI\Client\Model\Coordinates|null $coordinates coordinates
     *
     * @return self
     */
    public function setCoordinates($coordinates)
    {

        if (is_null($coordinates)) {
            throw new \InvalidArgumentException('non-nullable coordinates cannot be null');
        }

        $this->container['coordinates'] = $coordinates;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country Country should be specified as two uppercase letters (ISO Alpha-2). Example `SE` for Sweden, `ES` for Spain.
     *
     * @return self
     */
    public function setCountry($country)
    {

        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets door_code
     *
     * @return string|null
     */
    public function getDoorCode()
    {
        return $this->container['door_code'];
    }

    /**
     * Sets door_code
     *
     * @param string|null $door_code door_code
     *
     * @return self
     */
    public function setDoorCode($door_code)
    {

        if (is_null($door_code)) {
            throw new \InvalidArgumentException('non-nullable door_code cannot be null');
        }

        $this->container['door_code'] = $door_code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string|null
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string|null $postal_code postal_code
     *
     * @return self
     */
    public function setPostalCode($postal_code)
    {

        if (is_null($postal_code)) {
            throw new \InvalidArgumentException('non-nullable postal_code cannot be null');
        }

        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string|null
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string|null $region region
     *
     * @return self
     */
    public function setRegion($region)
    {

        if (is_null($region)) {
            throw new \InvalidArgumentException('non-nullable region cannot be null');
        }

        $this->container['region'] = $region;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street Name of the street.
     *
     * @return self
     */
    public function setStreet($street)
    {

        if (is_null($street)) {
            throw new \InvalidArgumentException('non-nullable street cannot be null');
        }

        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets street_number
     *
     * @return string|null
     */
    public function getStreetNumber()
    {
        return $this->container['street_number'];
    }

    /**
     * Sets street_number
     *
     * @param string|null $street_number Number of the street.
     *
     * @return self
     */
    public function setStreetNumber($street_number)
    {

        if (is_null($street_number)) {
            throw new \InvalidArgumentException('non-nullable street_number cannot be null');
        }

        $this->container['street_number'] = $street_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


