<?php
/**
 * Session
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SIW API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Session Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Session implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Session';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'additional_information' => '\OpenAPI\Client\Model\AdditionalInfo',
        'cart' => '\OpenAPI\Client\Model\Cart',
        'customer' => '\OpenAPI\Client\Model\CustomerInfo',
        'customer_info' => '\OpenAPI\Client\Model\CustomerInfo',
        'experiment_id' => 'string',
        'expires_at' => 'string',
        'external_id' => 'string',
        'id' => 'string',
        'result' => '\OpenAPI\Client\Model\Result',
        'search_address' => '\OpenAPI\Client\Model\Address',
        'selected_shipping_option' => '\OpenAPI\Client\Model\SelectedShippingOption',
        'shipping_cost' => '\OpenAPI\Client\Model\ShippingCost',
        'shipping_price' => 'int',
        'status' => 'string',
        'tos_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'additional_information' => null,
        'cart' => null,
        'customer' => null,
        'customer_info' => null,
        'experiment_id' => null,
        'expires_at' => null,
        'external_id' => null,
        'id' => null,
        'result' => null,
        'search_address' => null,
        'selected_shipping_option' => null,
        'shipping_cost' => null,
        'shipping_price' => 'int32',
        'status' => null,
        'tos_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'additional_information' => false,
		'cart' => false,
		'customer' => false,
		'customer_info' => false,
		'experiment_id' => false,
		'expires_at' => false,
		'external_id' => false,
		'id' => false,
		'result' => false,
		'search_address' => false,
		'selected_shipping_option' => false,
		'shipping_cost' => false,
		'shipping_price' => false,
		'status' => false,
		'tos_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'additional_information' => 'additional_information',
        'cart' => 'cart',
        'customer' => 'customer',
        'customer_info' => 'customer_info',
        'experiment_id' => 'experiment_id',
        'expires_at' => 'expires_at',
        'external_id' => 'external_id',
        'id' => 'id',
        'result' => 'result',
        'search_address' => 'search_address',
        'selected_shipping_option' => 'selected_shipping_option',
        'shipping_cost' => 'shipping_cost',
        'shipping_price' => 'shipping_price',
        'status' => 'status',
        'tos_id' => 'tos_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'additional_information' => 'setAdditionalInformation',
        'cart' => 'setCart',
        'customer' => 'setCustomer',
        'customer_info' => 'setCustomerInfo',
        'experiment_id' => 'setExperimentId',
        'expires_at' => 'setExpiresAt',
        'external_id' => 'setExternalId',
        'id' => 'setId',
        'result' => 'setResult',
        'search_address' => 'setSearchAddress',
        'selected_shipping_option' => 'setSelectedShippingOption',
        'shipping_cost' => 'setShippingCost',
        'shipping_price' => 'setShippingPrice',
        'status' => 'setStatus',
        'tos_id' => 'setTosId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'additional_information' => 'getAdditionalInformation',
        'cart' => 'getCart',
        'customer' => 'getCustomer',
        'customer_info' => 'getCustomerInfo',
        'experiment_id' => 'getExperimentId',
        'expires_at' => 'getExpiresAt',
        'external_id' => 'getExternalId',
        'id' => 'getId',
        'result' => 'getResult',
        'search_address' => 'getSearchAddress',
        'selected_shipping_option' => 'getSelectedShippingOption',
        'shipping_cost' => 'getShippingCost',
        'shipping_price' => 'getShippingPrice',
        'status' => 'getStatus',
        'tos_id' => 'getTosId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('additional_information', $data ?? [], null);
        $this->setIfExists('cart', $data ?? [], null);
        $this->setIfExists('customer', $data ?? [], null);
        $this->setIfExists('customer_info', $data ?? [], null);
        $this->setIfExists('experiment_id', $data ?? [], null);
        $this->setIfExists('expires_at', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('search_address', $data ?? [], null);
        $this->setIfExists('selected_shipping_option', $data ?? [], null);
        $this->setIfExists('shipping_cost', $data ?? [], null);
        $this->setIfExists('shipping_price', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('tos_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets additional_information
     *
     * @return \OpenAPI\Client\Model\AdditionalInfo|null
     */
    public function getAdditionalInformation()
    {
        return $this->container['additional_information'];
    }

    /**
     * Sets additional_information
     *
     * @param \OpenAPI\Client\Model\AdditionalInfo|null $additional_information additional_information
     *
     * @return self
     */
    public function setAdditionalInformation($additional_information)
    {

        if (is_null($additional_information)) {
            throw new \InvalidArgumentException('non-nullable additional_information cannot be null');
        }

        $this->container['additional_information'] = $additional_information;

        return $this;
    }

    /**
     * Gets cart
     *
     * @return \OpenAPI\Client\Model\Cart|null
     */
    public function getCart()
    {
        return $this->container['cart'];
    }

    /**
     * Sets cart
     *
     * @param \OpenAPI\Client\Model\Cart|null $cart cart
     *
     * @return self
     */
    public function setCart($cart)
    {

        if (is_null($cart)) {
            throw new \InvalidArgumentException('non-nullable cart cannot be null');
        }

        $this->container['cart'] = $cart;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \OpenAPI\Client\Model\CustomerInfo|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \OpenAPI\Client\Model\CustomerInfo|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {

        if (is_null($customer)) {
            throw new \InvalidArgumentException('non-nullable customer cannot be null');
        }

        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets customer_info
     *
     * @return \OpenAPI\Client\Model\CustomerInfo|null
     */
    public function getCustomerInfo()
    {
        return $this->container['customer_info'];
    }

    /**
     * Sets customer_info
     *
     * @param \OpenAPI\Client\Model\CustomerInfo|null $customer_info customer_info
     *
     * @return self
     */
    public function setCustomerInfo($customer_info)
    {

        if (is_null($customer_info)) {
            throw new \InvalidArgumentException('non-nullable customer_info cannot be null');
        }

        $this->container['customer_info'] = $customer_info;

        return $this;
    }

    /**
     * Gets experiment_id
     *
     * @return string|null
     */
    public function getExperimentId()
    {
        return $this->container['experiment_id'];
    }

    /**
     * Sets experiment_id
     *
     * @param string|null $experiment_id Identifier of an A/B testing experiment, which is related to the session. If the session is not related to any A/B testing experiment, this field is empty.
     *
     * @return self
     */
    public function setExperimentId($experiment_id)
    {

        if (is_null($experiment_id)) {
            throw new \InvalidArgumentException('non-nullable experiment_id cannot be null');
        }

        $this->container['experiment_id'] = $experiment_id;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return string|null
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param string|null $expires_at Time at which some of the shipping options will be invalid. This is influenced by the cutoff times at the warehouse among other things. Session should be refreshed if this value is in the past.
     *
     * @return self
     */
    public function setExpiresAt($expires_at)
    {

        if (is_null($expires_at)) {
            throw new \InvalidArgumentException('non-nullable expires_at cannot be null');
        }

        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id Can be used to store a unique identifier from the merchant. For example external order ID or external shipment ID.
     *
     * @return self
     */
    public function setExternalId($external_id)
    {

        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }

        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id UUIDv4 identifier of the session. Generated when session is created. Used for updating, fetching and completing the session.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets result
     *
     * @return \OpenAPI\Client\Model\Result|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param \OpenAPI\Client\Model\Result|null $result result
     *
     * @return self
     */
    public function setResult($result)
    {

        if (is_null($result)) {
            throw new \InvalidArgumentException('non-nullable result cannot be null');
        }

        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets search_address
     *
     * @return \OpenAPI\Client\Model\Address|null
     */
    public function getSearchAddress()
    {
        return $this->container['search_address'];
    }

    /**
     * Sets search_address
     *
     * @param \OpenAPI\Client\Model\Address|null $search_address search_address
     *
     * @return self
     */
    public function setSearchAddress($search_address)
    {

        if (is_null($search_address)) {
            throw new \InvalidArgumentException('non-nullable search_address cannot be null');
        }

        $this->container['search_address'] = $search_address;

        return $this;
    }

    /**
     * Gets selected_shipping_option
     *
     * @return \OpenAPI\Client\Model\SelectedShippingOption|null
     */
    public function getSelectedShippingOption()
    {
        return $this->container['selected_shipping_option'];
    }

    /**
     * Sets selected_shipping_option
     *
     * @param \OpenAPI\Client\Model\SelectedShippingOption|null $selected_shipping_option selected_shipping_option
     *
     * @return self
     */
    public function setSelectedShippingOption($selected_shipping_option)
    {

        if (is_null($selected_shipping_option)) {
            throw new \InvalidArgumentException('non-nullable selected_shipping_option cannot be null');
        }

        $this->container['selected_shipping_option'] = $selected_shipping_option;

        return $this;
    }

    /**
     * Gets shipping_cost
     *
     * @return \OpenAPI\Client\Model\ShippingCost|null
     */
    public function getShippingCost()
    {
        return $this->container['shipping_cost'];
    }

    /**
     * Sets shipping_cost
     *
     * @param \OpenAPI\Client\Model\ShippingCost|null $shipping_cost shipping_cost
     *
     * @return self
     */
    public function setShippingCost($shipping_cost)
    {

        if (is_null($shipping_cost)) {
            throw new \InvalidArgumentException('non-nullable shipping_cost cannot be null');
        }

        $this->container['shipping_cost'] = $shipping_cost;

        return $this;
    }

    /**
     * Gets shipping_price
     *
     * @return int|null
     */
    public function getShippingPrice()
    {
        return $this->container['shipping_price'];
    }

    /**
     * Sets shipping_price
     *
     * @param int|null $shipping_price Price of currently selected (or pre-selected) shipping option.
     *
     * @return self
     */
    public function setShippingPrice($shipping_price)
    {

        if (is_null($shipping_price)) {
            throw new \InvalidArgumentException('non-nullable shipping_price cannot be null');
        }

        $this->container['shipping_price'] = $shipping_price;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {

        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets tos_id
     *
     * @return string|null
     */
    public function getTosId()
    {
        return $this->container['tos_id'];
    }

    /**
     * Sets tos_id
     *
     * @param string|null $tos_id tos_id
     *
     * @return self
     */
    public function setTosId($tos_id)
    {

        if (is_null($tos_id)) {
            throw new \InvalidArgumentException('non-nullable tos_id cannot be null');
        }

        $this->container['tos_id'] = $tos_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


