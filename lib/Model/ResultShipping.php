<?php
/**
 * ResultShipping
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SIW API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ResultShipping Class Doc Comment
 *
 * @category Class
 * @description How the package should be shipped to the end customer.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ResultShipping implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ResultShipping';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'addons' => '\OpenAPI\Client\Model\CarrierAddon[]',
        'carrier' => 'string',
        'delivery_addons' => '\OpenAPI\Client\Model\ResultDeliveryAddon[]',
        'delivery_time' => '\OpenAPI\Client\Model\TimeSlot',
        'delivery_type' => 'string',
        'external_method_id' => 'string',
        'location' => '\OpenAPI\Client\Model\PickupLocation',
        'meta' => 'array<string,string>',
        'product' => 'string',
        'route' => '\OpenAPI\Client\Model\Route',
        'shipping_method' => 'string',
        'supports' => '\OpenAPI\Client\Model\Supports',
        'warehouse' => '\OpenAPI\Client\Model\ResultWarehouse'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'addons' => null,
        'carrier' => null,
        'delivery_addons' => null,
        'delivery_time' => null,
        'delivery_type' => null,
        'external_method_id' => null,
        'location' => null,
        'meta' => null,
        'product' => null,
        'route' => null,
        'shipping_method' => null,
        'supports' => null,
        'warehouse' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'addons' => false,
		'carrier' => false,
		'delivery_addons' => false,
		'delivery_time' => false,
		'delivery_type' => false,
		'external_method_id' => false,
		'location' => false,
		'meta' => false,
		'product' => false,
		'route' => false,
		'shipping_method' => false,
		'supports' => false,
		'warehouse' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'addons' => 'addons',
        'carrier' => 'carrier',
        'delivery_addons' => 'delivery_addons',
        'delivery_time' => 'delivery_time',
        'delivery_type' => 'delivery_type',
        'external_method_id' => 'external_method_id',
        'location' => 'location',
        'meta' => 'meta',
        'product' => 'product',
        'route' => 'route',
        'shipping_method' => 'shipping_method',
        'supports' => 'supports',
        'warehouse' => 'warehouse'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'addons' => 'setAddons',
        'carrier' => 'setCarrier',
        'delivery_addons' => 'setDeliveryAddons',
        'delivery_time' => 'setDeliveryTime',
        'delivery_type' => 'setDeliveryType',
        'external_method_id' => 'setExternalMethodId',
        'location' => 'setLocation',
        'meta' => 'setMeta',
        'product' => 'setProduct',
        'route' => 'setRoute',
        'shipping_method' => 'setShippingMethod',
        'supports' => 'setSupports',
        'warehouse' => 'setWarehouse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'addons' => 'getAddons',
        'carrier' => 'getCarrier',
        'delivery_addons' => 'getDeliveryAddons',
        'delivery_time' => 'getDeliveryTime',
        'delivery_type' => 'getDeliveryType',
        'external_method_id' => 'getExternalMethodId',
        'location' => 'getLocation',
        'meta' => 'getMeta',
        'product' => 'getProduct',
        'route' => 'getRoute',
        'shipping_method' => 'getShippingMethod',
        'supports' => 'getSupports',
        'warehouse' => 'getWarehouse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('addons', $data ?? [], null);
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('delivery_addons', $data ?? [], null);
        $this->setIfExists('delivery_time', $data ?? [], null);
        $this->setIfExists('delivery_type', $data ?? [], null);
        $this->setIfExists('external_method_id', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('meta', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('route', $data ?? [], null);
        $this->setIfExists('shipping_method', $data ?? [], null);
        $this->setIfExists('supports', $data ?? [], null);
        $this->setIfExists('warehouse', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets addons
     *
     * @return \OpenAPI\Client\Model\CarrierAddon[]|null
     */
    public function getAddons()
    {
        return $this->container['addons'];
    }

    /**
     * Sets addons
     *
     * @param \OpenAPI\Client\Model\CarrierAddon[]|null $addons Shipping products addons that are enabled by default. Can be configured in the Merchant Admin tool.
     *
     * @return self
     */
    public function setAddons($addons)
    {

        if (is_null($addons)) {
            throw new \InvalidArgumentException('non-nullable addons cannot be null');
        }

        $this->container['addons'] = $addons;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return string|null
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string|null $carrier Name of the shipping company.
     *
     * @return self
     */
    public function setCarrier($carrier)
    {

        if (is_null($carrier)) {
            throw new \InvalidArgumentException('non-nullable carrier cannot be null');
        }

        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets delivery_addons
     *
     * @return \OpenAPI\Client\Model\ResultDeliveryAddon[]|null
     */
    public function getDeliveryAddons()
    {
        return $this->container['delivery_addons'];
    }

    /**
     * Sets delivery_addons
     *
     * @param \OpenAPI\Client\Model\ResultDeliveryAddon[]|null $delivery_addons Selected delivery addons.
     *
     * @return self
     */
    public function setDeliveryAddons($delivery_addons)
    {

        if (is_null($delivery_addons)) {
            throw new \InvalidArgumentException('non-nullable delivery_addons cannot be null');
        }

        $this->container['delivery_addons'] = $delivery_addons;

        return $this;
    }

    /**
     * Gets delivery_time
     *
     * @return \OpenAPI\Client\Model\TimeSlot|null
     */
    public function getDeliveryTime()
    {
        return $this->container['delivery_time'];
    }

    /**
     * Sets delivery_time
     *
     * @param \OpenAPI\Client\Model\TimeSlot|null $delivery_time delivery_time
     *
     * @return self
     */
    public function setDeliveryTime($delivery_time)
    {

        if (is_null($delivery_time)) {
            throw new \InvalidArgumentException('non-nullable delivery_time cannot be null');
        }

        $this->container['delivery_time'] = $delivery_time;

        return $this;
    }

    /**
     * Gets delivery_type
     *
     * @return string|null
     */
    public function getDeliveryType()
    {
        return $this->container['delivery_type'];
    }

    /**
     * Sets delivery_type
     *
     * @param string|null $delivery_type Type of delivery (pickup, instore, mailbox, delivery).
     *
     * @return self
     */
    public function setDeliveryType($delivery_type)
    {

        if (is_null($delivery_type)) {
            throw new \InvalidArgumentException('non-nullable delivery_type cannot be null');
        }

        $this->container['delivery_type'] = $delivery_type;

        return $this;
    }

    /**
     * Gets external_method_id
     *
     * @return string|null
     */
    public function getExternalMethodId()
    {
        return $this->container['external_method_id'];
    }

    /**
     * Sets external_method_id
     *
     * @param string|null $external_method_id External method identifier, can be used for merchant-specific shipping methods mappings, eg override.
     *
     * @return self
     */
    public function setExternalMethodId($external_method_id)
    {

        if (is_null($external_method_id)) {
            throw new \InvalidArgumentException('non-nullable external_method_id cannot be null');
        }

        $this->container['external_method_id'] = $external_method_id;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \OpenAPI\Client\Model\PickupLocation|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \OpenAPI\Client\Model\PickupLocation|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {

        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }

        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return array<string,string>|null
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param array<string,string>|null $meta Carrier specific metadata related to the shipping option, for example addons.
     *
     * @return self
     */
    public function setMeta($meta)
    {

        if (is_null($meta)) {
            throw new \InvalidArgumentException('non-nullable meta cannot be null');
        }

        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string|null $product Name of the shipping product.
     *
     * @return self
     */
    public function setProduct($product)
    {

        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }

        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets route
     *
     * @return \OpenAPI\Client\Model\Route|null
     */
    public function getRoute()
    {
        return $this->container['route'];
    }

    /**
     * Sets route
     *
     * @param \OpenAPI\Client\Model\Route|null $route route
     *
     * @return self
     */
    public function setRoute($route)
    {

        if (is_null($route)) {
            throw new \InvalidArgumentException('non-nullable route cannot be null');
        }

        $this->container['route'] = $route;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return string|null
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param string|null $shipping_method Ingrid's ID of the shipping product. Example `bst-std` for BEST Delivery.
     *
     * @return self
     */
    public function setShippingMethod($shipping_method)
    {

        if (is_null($shipping_method)) {
            throw new \InvalidArgumentException('non-nullable shipping_method cannot be null');
        }

        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets supports
     *
     * @return \OpenAPI\Client\Model\Supports|null
     */
    public function getSupports()
    {
        return $this->container['supports'];
    }

    /**
     * Sets supports
     *
     * @param \OpenAPI\Client\Model\Supports|null $supports supports
     *
     * @return self
     */
    public function setSupports($supports)
    {

        if (is_null($supports)) {
            throw new \InvalidArgumentException('non-nullable supports cannot be null');
        }

        $this->container['supports'] = $supports;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return \OpenAPI\Client\Model\ResultWarehouse|null
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param \OpenAPI\Client\Model\ResultWarehouse|null $warehouse warehouse
     *
     * @return self
     */
    public function setWarehouse($warehouse)
    {

        if (is_null($warehouse)) {
            throw new \InvalidArgumentException('non-nullable warehouse cannot be null');
        }

        $this->container['warehouse'] = $warehouse;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


