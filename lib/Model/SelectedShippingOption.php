<?php
/**
 * SelectedShippingOption
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * SIW API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SelectedShippingOption Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SelectedShippingOption implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SelectedShippingOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'carrier' => 'string',
        'category_tags' => '\OpenAPI\Client\Model\Tag[]',
        'currency' => 'string',
        'delivery_type' => 'string',
        'external_method_id' => 'string',
        'location' => '\OpenAPI\Client\Model\PickupLocation',
        'meta' => 'array<string,string>',
        'price' => 'int',
        'product' => 'string',
        'routes' => '\OpenAPI\Client\Model\Route[]',
        'shipping_category' => 'string',
        'shipping_method' => 'string',
        'time_slot' => '\OpenAPI\Client\Model\TimeSlot'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'carrier' => null,
        'category_tags' => null,
        'currency' => null,
        'delivery_type' => null,
        'external_method_id' => null,
        'location' => null,
        'meta' => null,
        'price' => 'int32',
        'product' => null,
        'routes' => null,
        'shipping_category' => null,
        'shipping_method' => null,
        'time_slot' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'carrier' => false,
		'category_tags' => false,
		'currency' => false,
		'delivery_type' => false,
		'external_method_id' => false,
		'location' => false,
		'meta' => false,
		'price' => false,
		'product' => false,
		'routes' => false,
		'shipping_category' => false,
		'shipping_method' => false,
		'time_slot' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carrier' => 'carrier',
        'category_tags' => 'category_tags',
        'currency' => 'currency',
        'delivery_type' => 'delivery_type',
        'external_method_id' => 'external_method_id',
        'location' => 'location',
        'meta' => 'meta',
        'price' => 'price',
        'product' => 'product',
        'routes' => 'routes',
        'shipping_category' => 'shipping_category',
        'shipping_method' => 'shipping_method',
        'time_slot' => 'time_slot'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carrier' => 'setCarrier',
        'category_tags' => 'setCategoryTags',
        'currency' => 'setCurrency',
        'delivery_type' => 'setDeliveryType',
        'external_method_id' => 'setExternalMethodId',
        'location' => 'setLocation',
        'meta' => 'setMeta',
        'price' => 'setPrice',
        'product' => 'setProduct',
        'routes' => 'setRoutes',
        'shipping_category' => 'setShippingCategory',
        'shipping_method' => 'setShippingMethod',
        'time_slot' => 'setTimeSlot'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carrier' => 'getCarrier',
        'category_tags' => 'getCategoryTags',
        'currency' => 'getCurrency',
        'delivery_type' => 'getDeliveryType',
        'external_method_id' => 'getExternalMethodId',
        'location' => 'getLocation',
        'meta' => 'getMeta',
        'price' => 'getPrice',
        'product' => 'getProduct',
        'routes' => 'getRoutes',
        'shipping_category' => 'getShippingCategory',
        'shipping_method' => 'getShippingMethod',
        'time_slot' => 'getTimeSlot'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('carrier', $data ?? [], null);
        $this->setIfExists('category_tags', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('delivery_type', $data ?? [], null);
        $this->setIfExists('external_method_id', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('meta', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('routes', $data ?? [], null);
        $this->setIfExists('shipping_category', $data ?? [], null);
        $this->setIfExists('shipping_method', $data ?? [], null);
        $this->setIfExists('time_slot', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carrier
     *
     * @return string|null
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string|null $carrier carrier
     *
     * @return self
     */
    public function setCarrier($carrier)
    {

        if (is_null($carrier)) {
            throw new \InvalidArgumentException('non-nullable carrier cannot be null');
        }

        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets category_tags
     *
     * @return \OpenAPI\Client\Model\Tag[]|null
     */
    public function getCategoryTags()
    {
        return $this->container['category_tags'];
    }

    /**
     * Sets category_tags
     *
     * @param \OpenAPI\Client\Model\Tag[]|null $category_tags category_tags
     *
     * @return self
     */
    public function setCategoryTags($category_tags)
    {

        if (is_null($category_tags)) {
            throw new \InvalidArgumentException('non-nullable category_tags cannot be null');
        }

        $this->container['category_tags'] = $category_tags;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {

        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets delivery_type
     *
     * @return string|null
     */
    public function getDeliveryType()
    {
        return $this->container['delivery_type'];
    }

    /**
     * Sets delivery_type
     *
     * @param string|null $delivery_type delivery_type
     *
     * @return self
     */
    public function setDeliveryType($delivery_type)
    {

        if (is_null($delivery_type)) {
            throw new \InvalidArgumentException('non-nullable delivery_type cannot be null');
        }

        $this->container['delivery_type'] = $delivery_type;

        return $this;
    }

    /**
     * Gets external_method_id
     *
     * @return string|null
     */
    public function getExternalMethodId()
    {
        return $this->container['external_method_id'];
    }

    /**
     * Sets external_method_id
     *
     * @param string|null $external_method_id External method identifier that can be used for custom shipping methods mappings, eg overriding a shipping product id from Ingrid by merchant's own. This mapping needs to be setup in the Merchant Admin tool.
     *
     * @return self
     */
    public function setExternalMethodId($external_method_id)
    {

        if (is_null($external_method_id)) {
            throw new \InvalidArgumentException('non-nullable external_method_id cannot be null');
        }

        $this->container['external_method_id'] = $external_method_id;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \OpenAPI\Client\Model\PickupLocation|null
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \OpenAPI\Client\Model\PickupLocation|null $location location
     *
     * @return self
     */
    public function setLocation($location)
    {

        if (is_null($location)) {
            throw new \InvalidArgumentException('non-nullable location cannot be null');
        }

        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return array<string,string>|null
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param array<string,string>|null $meta meta
     *
     * @return self
     */
    public function setMeta($meta)
    {

        if (is_null($meta)) {
            throw new \InvalidArgumentException('non-nullable meta cannot be null');
        }

        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {

        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }

        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string|null $product product
     *
     * @return self
     */
    public function setProduct($product)
    {

        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }

        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets routes
     *
     * @return \OpenAPI\Client\Model\Route[]|null
     */
    public function getRoutes()
    {
        return $this->container['routes'];
    }

    /**
     * Sets routes
     *
     * @param \OpenAPI\Client\Model\Route[]|null $routes Routes represent a list of delivery steps. This is used for so called chained deliveries where there are more than two deliveries involved to deliver a package to the customer. For example from central warehouse to the service point and then from a service point to customer's house. For a non-chained delivery this will contain only one step.
     *
     * @return self
     */
    public function setRoutes($routes)
    {

        if (is_null($routes)) {
            throw new \InvalidArgumentException('non-nullable routes cannot be null');
        }

        $this->container['routes'] = $routes;

        return $this;
    }

    /**
     * Gets shipping_category
     *
     * @return string|null
     */
    public function getShippingCategory()
    {
        return $this->container['shipping_category'];
    }

    /**
     * Sets shipping_category
     *
     * @param string|null $shipping_category Shipping category under which the selected shipping options are grouped. Shipping categories are setup and configured in the merchant admin tool.
     *
     * @return self
     */
    public function setShippingCategory($shipping_category)
    {

        if (is_null($shipping_category)) {
            throw new \InvalidArgumentException('non-nullable shipping_category cannot be null');
        }

        $this->container['shipping_category'] = $shipping_category;

        return $this;
    }

    /**
     * Gets shipping_method
     *
     * @return string|null
     */
    public function getShippingMethod()
    {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param string|null $shipping_method shipping_method
     *
     * @return self
     */
    public function setShippingMethod($shipping_method)
    {

        if (is_null($shipping_method)) {
            throw new \InvalidArgumentException('non-nullable shipping_method cannot be null');
        }

        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets time_slot
     *
     * @return \OpenAPI\Client\Model\TimeSlot|null
     */
    public function getTimeSlot()
    {
        return $this->container['time_slot'];
    }

    /**
     * Sets time_slot
     *
     * @param \OpenAPI\Client\Model\TimeSlot|null $time_slot time_slot
     *
     * @return self
     */
    public function setTimeSlot($time_slot)
    {

        if (is_null($time_slot)) {
            throw new \InvalidArgumentException('non-nullable time_slot cannot be null');
        }

        $this->container['time_slot'] = $time_slot;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


